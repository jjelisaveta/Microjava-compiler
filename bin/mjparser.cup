package rs.ac.bg.etf.pp1;
import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	boolean errorDetected;
	

	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal Integer NUMBER;
terminal Character CHAR;
terminal String BOOL;
terminal String IDENT;

terminal PROG, BREAK, PRINT, RETURN, VOID, CLASS, ENUM, IF, ELSE, CONST, DO, WHILE, NEW, READ, EXTENDS, CONTINUE;
terminal THIS, SUPER, GOTO, RECORD;
terminal PLUS, MINUS, MUL, DIV, MOD, EQ, NE, GT, GE, LT, LE, AND, OR, EQUAL, INC, DEC;
terminal SEMI, COLON, COMMA, POINT, LPAREN, RPAREN, LBRACKET, RBRACKET, LBRACE, RBRACE;

nonterminal DeclList, MethodDecl, MethodDeclList, ConstDecl, VarDecl, ClassDecl, ClassFieldsDeclList, RecordDecl, GlobalVarDecl, GlobalVarDeclList, GlobalOneVarDecl, OneVarDecl;
nonterminal VarDeclList, ConstDeclList, ClassDeclList, RecordDeclList, RecordVarDecls, RecordVarDecl, RecordName, MultipleVarDecl, ClassVarDeclList, ClassVarDecl, ClassFields;
nonterminal ClassName, ClassConstructor, ConstructorName, ClassMethods, ConstructorDecl, MethodReturnValue, MethodFormPars, FormPars, OneFormPar;
nonterminal Statement, SingleStatement, Statements, StatementList, IfCondition, DesignatorLBracket;
nonterminal AssignStatement, ActPars, ActParsList;
nonterminal Assignop, Relop, Addop, Mulop, DoKeyword;

nonterminal rs.etf.pp1.symboltable.concepts.Obj TypeConst,ProgName, Program, MethodName, Designator, Expr, Factor, Term, MinusTerm, AddopList, DesignatorStatement, CondFact, CondTerm, Condition;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type;

precedence left ELSE;

Program ::= 		(Program) PROG ProgName:p DeclList LBRACE MethodDeclList RBRACE
					;	
					
ProgName ::=		(ProgName) IDENT:progName ;

DeclList ::= 		(DeclListConst) DeclList ConstDecl
					| 
					(DeclListVar) DeclList GlobalVarDecl
					|
					(DeclListClass) DeclList ClassDecl
					|
					(DeclListRecord) DeclList RecordDecl
					|
					(NoDeclList) //epsilon
					;

MethodDeclList ::= 	(MethodsDecl) MethodDecl MethodDeclList 
					|
					(NoMetodDecl) //epsilon
					;
					
TypeConst ::= 		(NumConst) NUMBER:numConst
					|
					(CharConst) CHAR:charConst
					|
					(BoolConst) BOOL:boolConst
					;

ConstDecl ::=		(ConstDecl)  ConstDeclList SEMI
					;
					
ConstDeclList ::= 	(ConstantDecls) ConstDeclList COMMA IDENT:constName EQUAL TypeConst:typeConst
					|
					(ConstantDecl) CONST Type IDENT:constName EQUAL TypeConst:typeConst
					;
			
OneVarDecl ::= 		(OneVariableDecl) IDENT:varName
					|
					(OneArrayVariableDecl) IDENT:varName LBRACKET RBRACKET
					;
					
VarDeclList ::= 	(VariableDecls) VarDeclList COMMA OneVarDecl
					|
					(VariableDecl) Type:type OneVarDecl
					;
					
VarDecl ::=			(VarDecl) VarDeclList SEMI ;	
							
ClassVarDeclList ::= (ClassVariableDecls) ClassVarDeclList COMMA OneVarDecl
					|
					(ClassVariableDecl) Type OneVarDecl
					;
					
ClassVarDecl ::=	(ClassVariableDeclList) ClassVarDeclList SEMI
					|
					(ErrorClassVariableDeclSemi) error SEMI:er1
					{: parser.report_error("Greska 1 u deklaraciji polja unutrasnje klase u liniji " + er1left, null);  :}
					|
					(ErrorClassVariableDecl) error:er2
					{: parser.report_error("Greska 2 u deklaraciji polja unutrasnje klase u liniji " + er2left, null);  :}
					;
					
					
GlobalOneVarDecl ::= (GlobalOneVariableDecl) IDENT:varName
					|
					(GlobalOneArrayVariableDecl) IDENT:varName LBRACKET RBRACKET
					|
					(ErrorGlobalOneVariableDecl) error:e
					{: parser.report_error("Greska u deklaraciji globalne promenljive u liniji " + eleft, null);  :}
					;
					
GlobalVarDecl ::=	(GlobalVarDecls) Type GlobalVarDeclList SEMI
					|
					(ErrorGlobalVarDecl) error:e SEMI
					{: parser.report_error("Greska u deklaraciji globalne promenljive u liniji " + eleft, null);  :}
					;
					
					
GlobalVarDeclList ::=(GlobalVariableDecls) GlobalVarDeclList COMMA GlobalOneVarDecl
					|
					(GlobalVariableDecl) GlobalOneVarDecl
					;
					
ClassName ::= 		(ClassNameSingle) CLASS IDENT:className
					|
					(ClassNameExtends) CLASS IDENT:className EXTENDS Type:type
					|
					(ErrorClassName) CLASS IDENT error:e
					{: parser.report_error("Greska u deklaraciji prosirenja natklase u liniji " + eleft, null);  :}
					;
					
ClassDecl ::=		(ClassDeclMethods) ClassName LBRACE ClassFields LBRACE ConstructorDecl MethodDeclList RBRACE RBRACE
					|
					(ClassDeclMethodsNoConstr) ClassName LBRACE ClassFields LBRACE MethodDeclList RBRACE RBRACE
					|
					(ClassDeclNoMethods) ClassName LBRACE ClassFields RBRACE
					;
					
ClassFields ::= 	(ClassFields) ClassFieldsDeclList ;

ClassFieldsDeclList ::= (MultipleClassFields) ClassFieldsDeclList ClassVarDecl
					|
					(NoClassFields) // epsilon
					;

					
MultipleVarDecl ::= (VarDecls) MultipleVarDecl VarDecl
					|
					(NoVarDecl) //epsilon
 					;
 
RecordName ::= 		(RecordName) RECORD IDENT:recordName;
 
RecordDecl ::= 		(RecordDecl) RecordName LBRACE RecordVarDecls RBRACE ;

RecordVarDecls ::=	(RecordVariableDecl) RecordVarDecls RecordVarDecl
					|
					(RecordNoVariableDecl) //epsilon
 					;
 					
RecordVarDecl ::= 	(RecordVariableDeclaration) VarDeclList SEMI;

ConstructorName ::= (ConstructorName) IDENT:className ;

ConstructorDecl ::=	(ConstructorDecl) ConstructorName LPAREN RPAREN MultipleVarDecl LBRACE Statement RBRACE ;

MethodReturnValue ::= (ReturnType) Type:type
				  	|
	
				  	(ReturnVoid) VOID:type
				  	;

MethodDecl ::= 		(MethodDeclStmt) MethodReturnValue MethodName LPAREN MethodFormPars RPAREN MultipleVarDecl LBRACE StatementList RBRACE 
					|
					(MethodDeclNoStmt) MethodReturnValue MethodName LPAREN MethodFormPars RPAREN MultipleVarDecl LBRACE RBRACE 
					;

MethodName ::= 		(MethodName) IDENT:methodName ;

MethodFormPars ::= 	(MethodFormParams) FormPars
					|
					(NoMethodFormParams) //epsilon
					;

OneFormPar ::= 		(OneFormParam) Type:type IDENT:paramName
					|
					(OneArrayFormParam) Type:type IDENT:paramName LBRACKET RBRACKET
					|
					(ErrorOneArrayFormParam) error:e
					{: parser.report_error("Greska u deklaraciji formalnog parametra funkcije u liniji " + eleft, null);  :}
					;		

FormPars ::= 		(FormParams) FormPars COMMA OneFormPar
					|
					(FormParam) OneFormPar
					;
					
Type ::=			(Type) IDENT:typeName ;

Statement ::= 		(DesignatorStmt) DesignatorStatement SEMI
					|
					(DoStmt) DoKeyword Statement WHILE LPAREN Condition RPAREN SEMI
					|
					(BreakStmt) BREAK SEMI
					|
					(ContinueStmt) CONTINUE SEMI
					|
					(ReturnStmtExpr) RETURN Expr SEMI
					|
					(ReturnStmt) RETURN SEMI
					|
					(ReadStmt) READ LPAREN Designator RPAREN SEMI
					|
					(PrintStmtNum) PRINT LPAREN Expr COMMA NUMBER:numConst RPAREN SEMI
					|
					(PrintStmt) PRINT LPAREN Expr RPAREN SEMI
					|
					(IfStmt) IF LPAREN IfCondition RPAREN Statement
					|
					(IfElseStmt) IF LPAREN IfCondition RPAREN Statement ELSE Statement
					|
					(MultipleStatements)Statements
					;

DoKeyword ::=		(DoKeyword) DO ;
					
IfCondition ::= 	(OkIfCondition) Condition:cond
					|
					(ErrorIfCondition) error:e
					{: parser.report_error("Greska u logickom izrazu u if konstrukciji u liniji " + eleft, null);  :}
					;
					
Statements ::=		(Stmts) LBRACE StatementList RBRACE ;

StatementList ::=	(StmtList) StatementList Statement
					|
					(OneStmt) Statement
					;
					
DesignatorStatement ::= (DesignatorStmtAssign) AssignStatement
					|
					(DesignatorStmtFuncCall) Designator LPAREN ActParsList RPAREN 
					|
					(DesignatorStmtInc) Designator INC
					|
					(DesignatorStmtDec) Designator DEC
					;
					
AssignStatement ::= (AssignStmt) Designator Assignop Expr
					|
					(ErrorAssignStmt) Designator Assignop:e  error
					{: parser.report_error("Greska u iskazu dodele u liniji " + eleft, null);  :}
					;
					
ActPars ::= 		(ActParams) ActPars COMMA Expr	
					|
					(ActParam) Expr
					;
					
ActParsList ::= 	(ActParamsList) ActPars
					|
					(NoActParams) // epsilon 
					;
					
Condition ::= 		(Conditions) Condition OR CondTerm
					|
					(ConditionCondTerm) CondTerm
					;

CondTerm ::=		(CondTerms) CondTerm AND CondFact
					|
					(ConditionCondFact) CondFact
					;
					
CondFact ::=		(CondFactExpr) Expr
					|
					(CondFactExprRelop) Expr Relop Expr				
					;
					 
Expr ::= 			(ExprPlusAddop) Term AddopList
					|
					(ExprPlus) Term:term
					|
					(ExprMinusAddop) MinusTerm AddopList
					|
					(ExprMinus) MinusTerm
					;
				
MinusTerm ::= 		(MinusTerm) MINUS Term ;
				
AddopList ::=		(AddOpsList) AddopList Addop Term 	
					|
					(OneAddop) Addop Term
					;
					
Term ::=			(Terms) Term:term Mulop Factor:factor
					|
					(TermFactor) Factor:factor
					;
					
Factor ::= 			(FactorNoParen) Designator
					|
					(FactorParen) Designator LPAREN ActParsList RPAREN
					|
					(FactorTypeConst) TypeConst:typeConst
					|
					(FactorType) NEW Type 
					|
					(FactorArrayType) NEW Type LBRACKET Expr RBRACKET
					|
					(FactorExpr) LPAREN Expr RPAREN
					;
					
Designator ::=		(DesignatorPoint) Designator:prev POINT IDENT:name
					|
					(DesignatorBracket) Designator:prev DesignatorLBracket:lbracket Expr RBRACKET
					|
					(DesignatorIdent) IDENT:name
					;
					
DesignatorLBracket ::= (DesignatorLBracket) LBRACKET ;
		
Assignop ::= 		(AssignOperator) EQUAL ;

Relop ::= 			(RelOpEq) EQ
					|
					(RelOpNe) NE
					|
					(RelOpGt) GT
					|
					(RelOpGe) GE
					|
					(RelOpLt) LT
					|
					(RelOpLe) LE
					;
		
Addop ::= 			(AddOpPlus) PLUS
					|
					(AddOpMinus) MINUS
					;
		
Mulop ::= 			(MulOpMul) MUL
					|
					(MulOpDiv) DIV
					|
					(MulOpMod) MOD
					;
